@page "/downloads"
@using MedbaseHybrid.Services
@inject IDatabaseRepository repository
@inject NavigationManager navMananger;


<PageTitle>Downloads</PageTitle>
<div class="container">
    <div class="row gx-5 align-items-center justify-content-center">
        <div class="row">
            @if (!TopicsList.Any() && IsBusy.Equals(true))
            {
                <LoadingComponent />
            }
            else if (!TopicsList.Any() && IsBusy.Equals(false))
            {
                <EmptyComponent />
            }
            else
            {
                <Virtualize Items="TopicsList.ToList()" TItem="Topic" Context="item">
                    <ItemContent>
                        <div class="col-lg-4 mb-2">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">
                                            @item.Name
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@($"questions/{item.TopicRef}")">View</MudButton>
                                </MudCardActions>
                            </MudCard>
                            @*<div class="card h-100 shadow border-0">
                        <div class="card-body p-4">
                        <div class="container-fluid text-center border-0 shadow card-footer mt-2" style="display:@(showCustomisation.Equals(true) && topicToCustomise == item.TopicRef ? "block" : "none")">
                        <h6 class="fw-bold">Customise Quiz🛠️z</h6>


                        <div class="container text-center m-1">
                        <button class="btn @(negativeMarking.Equals(true) ? "btn-primary" : "btn-outline-primary")" @onclick="ToggleNegativeMarking">
                        @(negativeMarking.Equals(true) ? "Negative Marking On" : "Negative Marking Off")
                        </button>
                        </div>
                        <div class="row text-center align-content-center justify-content-center">
                        <p class="col-auto">Number Of Questions</p>
                        <input class="col-auto" type="number" max="10" min="1" @bind="numberOfQuestions" />
                        </div>
                        <a class="btn btn-primary" href="@($"/quiz/{item.TopicRef}/{numberOfQuestions}/{negativeMarking}")">
                        Start!😛
                        </a>
                        </div>
                        </div>
                        </div>*@
                        </div>
                    </ItemContent>
                </Virtualize>
            }
        </div>
    </div>
</div>


@code {
    private IEnumerable<Topic> TopicsList { get; set; } = Enumerable.Empty<Topic>();
    private bool IsBusy;

    protected override void OnInitialized()
    {
        IsBusy = true;
        TopicsList = repository.GetTopicsAsync();
        IsBusy = false;
    }
}
