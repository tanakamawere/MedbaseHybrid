@page "/topics/{courseRef}"
@using MedbaseHybrid.Services
@using MedbaseLibrary.Models
@using MedbaseLibrary.Services
@inject IApiRepository repository
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject IDatabaseRepository databaseRepository

<PageTitle>Topics</PageTitle>

<div class="container mt-1">
    <MudBreadcrumbs Items="_items"></MudBreadcrumbs>
    <div class="row gx-5 align-items-center justify-content-center">
        <div class="row">
            @if (!TopicsList.Any())
            {
                <LoadingComponent />
            }
            else
            {
                <Virtualize Items="TopicsList.ToList()" TItem="Topic" Context="item">
                    <ItemContent>
                        <div class="col-lg-4 mb-2">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.h6">
                                            @item.Name
                                        </MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardActions>
                                    <MudButton Variant="Variant.Text" Color="Color.Primary" Href="@($"questions/{item.TopicRef}/online")">View</MudButton>
                                    <MudButton Variant="Variant.Text" Color="Color.Secondary" @onclick="() => Download(item)">Download</MudButton>
                                </MudCardActions>
                            </MudCard>
                            @*<div class="card h-100 shadow border-0">
                        <div class="card-body p-4">
                        <div class="container-fluid text-center border-0 shadow card-footer mt-2" style="display:@(showCustomisation.Equals(true) && topicToCustomise == item.TopicRef ? "block" : "none")">
                        <h6 class="fw-bold">Customise Quiz🛠️z</h6>


                        <div class="container text-center m-1">
                        <button class="btn @(negativeMarking.Equals(true) ? "btn-primary" : "btn-outline-primary")" @onclick="ToggleNegativeMarking">
                        @(negativeMarking.Equals(true) ? "Negative Marking On" : "Negative Marking Off")
                        </button>
                        </div>
                        <div class="row text-center align-content-center justify-content-center">
                        <p class="col-auto">Number Of Questions</p>
                        <input class="col-auto" type="number" max="10" min="1" @bind="numberOfQuestions" />
                        </div>
                        <a class="btn btn-primary" href="@($"/quiz/{item.TopicRef}/{numberOfQuestions}/{negativeMarking}")">
                        Start!😛
                        </a>
                        </div>
                        </div>
                        </div>*@
                        </div>
                    </ItemContent>
                </Virtualize>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string courseRef { get; set; } = "";
    bool showCustomisation = false;
    int topicToCustomise;
    private bool negativeMarking = false;
    private int numberOfQuestions = 1;
    private Snackbar snackbar;
    private List<BreadcrumbItem> _items = new List<BreadcrumbItem>
    {
        new BreadcrumbItem("Home", href: "#", icon: Icons.Material.Filled.Home),
        new BreadcrumbItem("Courses", href: "/courses", icon: Icons.Material.Filled.Book),
        new BreadcrumbItem("Topics", href: "/courses", icon: Icons.Material.Filled.LibraryBooks)
    };

    private IEnumerable<Topic> TopicsList { get; set; } = Enumerable.Empty<Topic>();

    protected async override Task OnParametersSetAsync() 
    {
        TopicsList = await repository.GetTopics(courseRef); 
    }

    private void ToggleNegativeMarking()
    {
        negativeMarking = !negativeMarking;
    }
    private void CustomiseQuiz(int reference)
    {
        topicToCustomise = reference;

        if (showCustomisation.Equals(false))
            showCustomisation = true;
        else if (showCustomisation.Equals(true))
            showCustomisation = false;
    }

    async Task Download(Topic topic)
    {
        if (topic is null) return;

        var downloadingDialog = DialogService.Show<LoadingDialog>("Downloading...");
        try
        {
            //add loading popup here

            if (CheckIfAlreadyDownloaded(topic) == false)
            {
                await DownloadMethod(topic);
                snackbar = Snackbar.Add("Download was successful", Severity.Success);
            }
            else
                snackbar = Snackbar.Add("This topic is already downloaded", Severity.Info);
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            //destroy loading popup here
            downloadingDialog.Close();
        }
    }

    async Task DownloadMethod(Topic topic)
    {
        await databaseRepository.SaveTopicAndQuestionsAsync(await repository.GetQuestionsSimple(topic.TopicRef), topic);
    }

    bool CheckIfAlreadyDownloaded(Topic topic)
    {
        List<Topic> downloadedTopics = databaseRepository.GetTopicsAsync().ToList();
        bool downloaded = false;
        Topic topicFound = downloadedTopics.Where(x => x.Name == topic.Name).FirstOrDefault();

        if (topicFound is not null)
        {
            downloaded = true;
        }
        return downloaded;
    }
}
