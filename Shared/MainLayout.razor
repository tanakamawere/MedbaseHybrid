@using MedbaseHybrid.MsalClient
@using MedbaseHybrid.Services
@using Microsoft.Extensions.Configuration
@using Sentry
@inherits LayoutComponentBase
@inject NavigationManager navManager
@inject IPCAWrapper _pcaWrapper
@inject IConfiguration _configuration

<PageTitle>Medbase | Medical School MCQs</PageTitle>

<MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="someTheme" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        <MudLink Typo="Typo.h6" Class="ml-3" Href="/home" Color="Color.Inherit">
            Medbase
        </MudLink>
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2">
        <MudNavMenu Rounded="true" Margin="Margin.Dense" Color="Color.Primary" Class="pa-2">

            <MudNavLink Class="@(internetOptionsVisibility.Equals(true) ? "d-block" : "d-none")" Href="/home" Icon="@Icons.Material.Filled.Dashboard">Home</MudNavLink>
            <MudNavLink OnClick="() => GoToTopics()" Icon="@Icons.Material.Filled.Download">Downloads</MudNavLink>
            @* <MudNavLink Href="/downloads" Icon="@Icons.Material.Filled.Download">Downloads</MudNavLink> *@
            <MudNavLink Class="@(internetOptionsVisibility.Equals(true) ? "d-block" : "d-none")" Href="/articles" Icon="@Icons.Material.Filled.Newspaper">Articles</MudNavLink>
            @* <MudNavLink Href="/Gamma" Icon="@Icons.Material.Filled.Download">Gamma</MudNavLink> *@
            <MudNavLink Href="/about" Icon="@Icons.Material.Filled.QuestionAnswer">About & Contact</MudNavLink>

            <MudDivider />
            @if (IsLoggedIn)
            {
                <MudNavLink Icon="@Icons.Material.Filled.Logout" OnClick="() => OnLogoutClicked()">Logout</MudNavLink>
            }
            else
            {
                <MudNavLink Icon="@Icons.Material.Filled.Login" OnClick="() => OnLoginClicked()">Login</MudNavLink>
            }
            <MudDivider />

            <MudNavLink OnClick="ThemeToggle" Icon="@(_isDarkMode == true ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)">
                @(_isDarkMode == true ? "Dark Mode On" : "Dark Mode Off")
            </MudNavLink>

        </MudNavMenu>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>
@code {
    bool _drawerOpen = true;
    bool internetOptionsVisibility = false;

    private MudThemeProvider _mudThemeProvider;
    private bool _isDarkMode;
    MudTheme someTheme = new()
        {
            Palette = new PaletteLight()
            {
                Primary = Colors.Blue.Darken2,
                AppbarBackground = Colors.Blue.Accent1,
            },
            PaletteDark = new PaletteDark()
            {
                Primary = Colors.Blue.Lighten1
            },
        };

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    void ThemeToggle() =>
        _isDarkMode = !_isDarkMode;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            await _mudThemeProvider.WatchSystemPreference(OnSystemPreferenceChanged);
            await CheckForInternet();
            StateHasChanged();
        }
    }

    private async Task OnSystemPreferenceChanged(bool newValue)
    {
        _isDarkMode = newValue;
        StateHasChanged();
    }

    private async Task CheckForInternet()
    {
        if (Helpers.InternetAvailable().Equals(true))
            internetOptionsVisibility = true;
        else
            internetOptionsVisibility = false;
    }

    private void GoToTopics()
    {
        try
        {
            navManager.NavigateTo("/downloads");
        }
        catch (Exception ex)
        {
            SentrySdk.CaptureException(ex);
        }
    }

    bool _isLoggedIn = false;
    public bool IsLoggedIn
    {
        get => _isLoggedIn;
        set
        {
            if (_isLoggedIn == value) return;
            _isLoggedIn = value;
            InvokeAsync(StateHasChanged);
        }
    }

    private async void OnLoginClicked()
    {
        IsLoggedIn = false;

        try
        {
            // Attempt silent login, and obtain access token.
            var result = await _pcaWrapper.AcquireTokenSilentAsync(_pcaWrapper.Scopes).ConfigureAwait(false);

            // Set access token.
            GlobalValues.AccessToken = result?.AccessToken;
            if (GlobalValues.AccessToken != null)
                IsLoggedIn = true;

        }
        // A MsalUiRequiredException will be thrown, if this is the first attempt to login, or after logging out.
        catch (MsalUiRequiredException)
        {
            try
            {
                // Perform interactive login, and obtain access token.
                var result = await _pcaWrapper.AcquireTokenInteractiveAsync(_pcaWrapper?.Scopes).ConfigureAwait(false);

                // Set access token.
                GlobalValues.AccessToken = result?.AccessToken;
                if (GlobalValues.AccessToken != null)
                    IsLoggedIn = true;
            }
            catch (Exception ex)
            {
                // Ignore.
            }
        }
        catch
        {
            IsLoggedIn = false;
        }

    }

    private async void OnLogoutClicked()
    {
        await _pcaWrapper.SignOutAsync().ConfigureAwait(false);
        IsLoggedIn = false;
        GlobalValues.AccessToken = null;
    }
}