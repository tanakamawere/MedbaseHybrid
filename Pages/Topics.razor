@page "/topics/{courseRef}"
@using MedbaseHybrid.Services;
@inject IApiRepository repository
@inject IDatabaseRepository database

<PageTitle>Topics</PageTitle>


<div class="container">
    <div class="row align-items-center justify-content-center">
        <div class="text-center text-xl-start">
            <h1 class="display-5 fw-bolder text-dark mb-2">Choose Topic</h1>
        </div>
        <div class="row">
            @foreach (Topic item in TopicsList)
            {
                <div class="col-lg-4 mb-2">
                    <div class="card h-100 shadow border-0">
                        <div class="card-body p-4">
                            <h5 class="card-title mb-3">
                                @item.Name
                            </h5>
                            <div class="btn-group justify-content-sm-center justify-content-xl-start">
                                <a class="btn btn-primary" href="@($"questions/{item.TopicRef}/online")">View All</a>
                                <button @(canDownload == false ? "disabled") class="btn btn-outline-dark" @onclick="() => DownloadTopic(item.Id)">
                                    Download
                                </button>
                                <button class="btn btn-outline-dark" @onclick="() => CustomiseQuiz(item.TopicRef)">
                                    Quiz
                                </button>
                            </div>
                            <div class="container-fluid text-center border-0 shadow card-footer mt-2" style="display:@(showCustomisation.Equals(true) && topicToCustomise == item.TopicRef ? "block" : "none")">
                                <h6 class="fw-bold">Customise Quiz</h6>

                                <div class="row">
                                    <p class="col-auto">Negative Marking</p>
                                    <InputCheckbox class="col-auto" @bind-Value="negativeMarking"></InputCheckbox>
                                </div>
                                <div class="row text-center align-content-center justify-content-center">
                                    <p class="col-auto">Number Of Questions</p>
                                    <input class="col-auto" type="number" max="10" min="1" @bind="numberOfQuestions" />
                                </div>
                                <a class="btn btn-primary" href="@($"/quiz/{item.TopicRef}/{numberOfQuestions}/{negativeMarking}/online")">
                                    Start!
                                </a>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string courseRef { get; set; } = "";
    bool showCustomisation = false;
    bool canDownload = true;
    int topicToCustomise;
    private bool negativeMarking = false;
    private int numberOfQuestions = 1;

    private IEnumerable<Topic> TopicsList { get; set; } = Enumerable.Empty<Topic>();

    protected override void OnInitialized() => CheckIfCanDownload();

    protected async override Task OnParametersSetAsync() => TopicsList = await repository.GetTopics(courseRef);

    private void CustomiseQuiz(int reference)
    {
        topicToCustomise = reference;

        if (showCustomisation.Equals(false))
            showCustomisation = true;
        else if (showCustomisation.Equals(true))
            showCustomisation = false;
    }

    private async void DownloadTopic(long inputId)
    {
        Topic topic = TopicsList.Where(x => x.Id == inputId).First();
        await Download(topic);
    }
    async Task Download(Topic topic)
    {
        if (topic is null) return;

        try
        {
            if (CheckIfAlreadyDownloaded(topic) == false)
                await DownloadMethod(topic);
            else
                await Shell.Current.DisplayAlert("Already downloaded", "Your requested topic is already downloaded on your device", "Ok");
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
        }
    }
    async Task DownloadMethod(Topic topic)
    {
        await database.SaveTopicAndQuestionsAsync(await repository.GetQuestionsSimple(topic.TopicRef), topic);
    }
    void CheckIfCanDownload()
    {
        List<Topic> downloadedTopics = database.GetTopicsAsync().ToList();
        if (downloadedTopics.Count >= 2)
        {
            if (Helpers.CheckSubscription())
            {
                EnableDownloads();
            }
            else
            {
                DisableDownloads();
            }
        }
        else if (downloadedTopics.Count < 2)
        {
            EnableDownloads();
        }
    }
    bool CheckIfAlreadyDownloaded(Topic topic)
    {
        List<Topic> downloadedTopics = database.GetTopicsAsync().ToList();
        bool downloaded = false;
        Topic topicFound = downloadedTopics.Where(x => x.Name == topic.Name).FirstOrDefault();

        if (topicFound is not null)
        {
            downloaded = true;
        }
        return downloaded;
    }
    void EnableDownloads()
    {
        canDownload = true;
    }
    void DisableDownloads()
    {
        canDownload = false;
    }
}
