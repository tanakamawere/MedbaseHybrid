@page "/topics/{courseRef}"
@using MedbaseHybrid.Services;
@inject IApiRepository repository
@inject IDatabaseRepository database

<PageTitle>Topics</PageTitle>


<div class="container">
    <div class="row align-items-center justify-content-center">
        <div class="text-center text-xl-start">
            <h1 class="display-5 fw-bolder text-dark mb-2">Choose Topic😙</h1>
        </div>
        <div class="row">
            @if (!TopicsList.Any())
            {
                <div class="text-center">
                    <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
                <span class="visible">Loading, please wait a bit...</span>
            }
            else if (loadingDownload.Equals(true))
            {
                <div class="text-center">
                    <div class="spinner-border" style="width: 3rem; height: 3rem;" role="status">
                        <span class="visually-hidden">Loading...</span>
                    </div>
                </div>
                <span class="visible">Downloading, please wait a bit...</span>
            }
            else
            {
                <div class="alert alert-warning @(topicAlreadyDownloaded == true ? "d-block" : "d-none")" role="alert" @onclick="DismissAlreadyDownloadedMessage">
                    Topic is already downloaded. Click to dismiss this message🫢
                </div>
                <div class="alert alert-success @(downloadSuccessful == true ? "d-block" : "d-none")" role="alert" @onclick="DismissDownloadSuccessfulMessage">
                    Your topic was downloaded successfully! Go to <a href="/dashboard">to see your downloads</a>😃
                </div>
                <div class="alert alert-info @(maxFreeDownloads == true ? "d-block" : "d-none")" role="alert" @onclick="DismissMaxFreeDownloads">
                    You have reached your maximum free downloads of 2. Upgrade to <a href="https://medbase.co.zw/premium">Medbase Premium</a> for more downloads and more.🆙
                </div>
                <Virtualize Items="TopicsList.ToList()" TItem="Topic" Context="item">
                    <ItemContent>
                        <div class="col-lg-4 mb-2">
                            <div class="card h-100 shadow border-0">
                                <div class="card-body p-4">
                                    <h5 class="card-title mb-3">
                                        @item.Name
                                    </h5>
                                    <div class="btn-group justify-content-center">
                                        <a class="btn btn-outline-dark" href="@($"questions/{item.TopicRef}/online")">View🥸</a>
                                        <button class="btn btn-outline-dark @(canDownload == true ? "" : "disabled" )" @onclick="() => Download(item.Id)">
                                            Download⏬
                                        </button>
                                        <button class="btn btn-outline-dark" @onclick="() => CustomiseQuiz(item.TopicRef)">
                                            Quiz🤔
                                        </button>
                                    </div>
                                    <div class="container-fluid text-center border-0 shadow card-footer mt-2" style="display:@(showCustomisation.Equals(true) && topicToCustomise == item.TopicRef ? "block" : "none")">
                                        <h6 class="fw-bold">Customise Quiz🛠️</h6>

                                        <div class="row">
                                            <p class="col-auto">Negative Marking➖</p>
                                            <InputCheckbox class="col-auto" @bind-Value="negativeMarking"></InputCheckbox>
                                        </div>
                                        <div class="row text-center align-content-center justify-content-center">
                                            <p class="col-auto">Number Of Questions</p>
                                            <input class="col-auto" type="number" max="10" min="1" @bind="numberOfQuestions" />
                                        </div>
                                        <a class="btn btn-primary" href="@($"/quiz/{item.TopicRef}/{numberOfQuestions}/{negativeMarking}/online")">
                                            Start!🥸
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </ItemContent>
                </Virtualize>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string courseRef { get; set; } = "";
    bool showCustomisation = false;
    bool canDownload = true;
    bool topicAlreadyDownloaded = false;
    bool downloadSuccessful;
    bool maxFreeDownloads;
    bool loadingDownload;
    int topicToCustomise;
    private bool negativeMarking = false;
    private int numberOfQuestions = 1;

    private IEnumerable<Topic> TopicsList { get; set; } = Enumerable.Empty<Topic>();

    protected override void OnInitialized() => CheckIfCanDownload();

    protected async override Task OnParametersSetAsync() => TopicsList = await repository.GetTopics(courseRef);

    private void CustomiseQuiz(int reference)
    {
        topicToCustomise = reference;

        if (showCustomisation.Equals(false))
            showCustomisation = true;
        else if (showCustomisation.Equals(true))
            showCustomisation = false;
    }

    async Task Download(long inputId)
    {
        Topic topic = TopicsList.Where(x => x.Id == inputId).First();
        loadingDownload = true;
        if (topic is null) return;

        try
        {
            if (CheckIfAlreadyDownloaded(topic) == false)
            {
                await database.SaveTopicAndQuestionsAsync(await repository.GetQuestionsSimple(topic.TopicRef), topic);
                downloadSuccessful = true;
            }
            else
                topicAlreadyDownloaded = true;
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            loadingDownload = false;
            CheckIfCanDownload();
            StateHasChanged();
        }
    }

    void CheckIfCanDownload()
    {
        List<Topic> downloadedTopics = database.GetTopicsAsync().ToList();
        if (downloadedTopics.Count >= 2)
        {
            if (Helpers.CheckSubscription())
            {
                EnableDownloads();
            }
            else
            {
                DisableDownloads();
            }
        }
        else if (downloadedTopics.Count < 2)
        {
            EnableDownloads();
        }
    }
    bool CheckIfAlreadyDownloaded(Topic topic)
    {
        List<Topic> downloadedTopics = database.GetTopicsAsync().ToList();
        bool downloaded = false;
        Topic topicFound = downloadedTopics.Where(x => x.Name == topic.Name).FirstOrDefault();

        if (topicFound is not null)
        {
            downloaded = true;
        }
        return downloaded;
    }
    void EnableDownloads()
    {
        canDownload = true;
    }
    void DisableDownloads()
    {
        maxFreeDownloads = true;
        canDownload = false;
    }
    void DismissAlreadyDownloadedMessage()
    {
        topicAlreadyDownloaded = !topicAlreadyDownloaded;
        StateHasChanged();
    }
    void DismissDownloadSuccessfulMessage()
    {
        downloadSuccessful = !downloadSuccessful;
        StateHasChanged();
    }
    void DismissMaxFreeDownloads()
    {
        maxFreeDownloads = !maxFreeDownloads;
        StateHasChanged();
    }
}
