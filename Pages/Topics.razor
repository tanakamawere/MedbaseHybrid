@page "/topics/{courseRef}"
@using MedbaseHybrid.Services;
@inject IApiRepository repository
@inject IDatabaseRepository database

<PageTitle>Topics</PageTitle>


<div class="container">
    <div class="row align-items-center justify-content-center">


        <nav style="--bs-breadcrumb-divider: '>';" aria-label="breadcrumb">
            <ol class="breadcrumb">
                <li class="breadcrumb-item"><a href="/">Home</a></li>
                <li class="breadcrumb-item"><a href="/">Courses</a></li>
                <li class="breadcrumb-item active" aria-current="page">Topics</li>
            </ol>
        </nav>

        <div class="row">
            @if (!TopicsList.Any() || loadingDownload.Equals(true))
            {
                <LoadingComponent />
            }
            else
            {
                <div class="alert alert-warning @(topicAlreadyDownloaded == true ? "d-block" : "d-none")" role="alert" @onclick="DismissAlreadyDownloadedMessage">
                    Topic is already downloaded. Click to dismiss this message🫢
                </div>
                <div class="alert alert-success @(downloadSuccessful == true ? "d-block" : "d-none")" role="alert" @onclick="DismissDownloadSuccessfulMessage">
                    Your topic was downloaded successfully! Go to <a href="/dashboard">to see your downloads</a>😃
                </div>
                <Virtualize Items="TopicsList.ToList()" TItem="Topic" Context="item">
                    <ItemContent>
                        <div class="col-lg-4 mb-2">
                            <div class="card h-100 shadow border-0">
                                <div class="card-body p-4">
                                    <h5 class="card-title mb-3">
                                        @item.Name
                                    </h5>
                                    <div class="row text-center">
                                        <div class="col-4">
                                            <a class="btn btn-primary" href="@($"questions/{item.TopicRef}/online")">View😆</a>
                                        </div>
                                        <div class="col-5">
                                            <a class="btn btn-primary" @onclick="() => Download(item.Id)">Download⏬</a>
                                        </div>
                                        <div class="col-3">
                                            <a class="btn btn-primary" @onclick="() => CustomiseQuiz(item.TopicRef)">Quiz🤔</a>
                                        </div>
                                    </div>
                                    <div class="container-fluid text-center border-0 shadow card-footer mt-2" style="display:@(showCustomisation.Equals(true) && topicToCustomise == item.TopicRef ? "block" : "none")">
                                        <h6 class="fw-bold">Customise Quiz🛠️</h6>
                                        
                                        <div class="container text-center m-1">

                                            <button class="btn @(negativeMarking.Equals(true) ? "btn-primary" : "btn-outline-primary")" @onclick="ToggleNegativeMarking">
                                                @(negativeMarking.Equals(true) ? "Negative Marking On" : "Negative Marking Off")
                                            </button>
                                        </div>
                                        <div class="row text-center align-content-center justify-content-center">
                                            <p class="col-auto">Number Of Questions</p>
                                            <input class="col-auto" type="number" max="10" min="1" @bind="numberOfQuestions" />
                                        </div>
                                        <a class="btn btn-primary" href="@($"/quiz/{item.TopicRef}/{numberOfQuestions}/{negativeMarking}/online")">
                                            Start!🥸
                                        </a>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </ItemContent>
                </Virtualize>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string courseRef { get; set; } = "";
    bool showCustomisation = false;
    bool topicAlreadyDownloaded = false;
    bool downloadSuccessful;
    bool loadingDownload;
    int topicToCustomise;
    private bool negativeMarking = false;
    private int numberOfQuestions = 1;

    private IEnumerable<Topic> TopicsList { get; set; } = Enumerable.Empty<Topic>();

    private void ToggleNegativeMarking()
    {
        negativeMarking = !negativeMarking;
    }

    protected async override Task OnParametersSetAsync() => TopicsList = await repository.GetTopics(courseRef);

    private void CustomiseQuiz(int reference)
    {
        topicToCustomise = reference;

        if (showCustomisation.Equals(false))
            showCustomisation = true;
        else if (showCustomisation.Equals(true))
            showCustomisation = false;
    }

    async Task Download(long inputId)
    {
        Topic topic = TopicsList.Where(x => x.Id == inputId).First();
        loadingDownload = true;
        if (topic is null) return;

        try
        {
            if (CheckIfAlreadyDownloaded(topic) == false)
            {
                await database.SaveTopicAndQuestionsAsync(await repository.GetQuestionsSimple(topic.TopicRef), topic);
                downloadSuccessful = true;
            }
            else
                topicAlreadyDownloaded = true;
        }
        catch (Exception)
        {
            throw;
        }
        finally
        {
            loadingDownload = false;
            StateHasChanged();
        }
    }
    bool CheckIfAlreadyDownloaded(Topic topic)
    {
        List<Topic> downloadedTopics = database.GetTopicsAsync().ToList();
        bool downloaded = false;
        Topic topicFound = downloadedTopics.Where(x => x.Name == topic.Name).FirstOrDefault();

        if (topicFound is not null)
        {
            downloaded = true;
        }
        return downloaded;
    }
    void DismissAlreadyDownloadedMessage()
    {
        topicAlreadyDownloaded = !topicAlreadyDownloaded;
        StateHasChanged();
    }
    void DismissDownloadSuccessfulMessage()
    {
        downloadSuccessful = !downloadSuccessful;
        StateHasChanged();
    }
}
