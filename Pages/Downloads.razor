@page "/"
@page "/downloads"
@inject IApiRepository repository
@using MedbaseHybrid.Services;
@inject IDatabaseRepository database

<div class="container">
    <div class="fixed-top">
        <TopNavBar>
            <div class="container-fluid">
                <span class="navbar-brand text-white mb-0 h1">Downloads</span>
            </div>
        </TopNavBar>
    </div>

    <div class="row align-items-center justify-content-center">
        <div class="text-start text-xl-start">
            <h6 class="display-6 fw-bolder text-dark mb-2">Downloads⏬</h6>
        </div>

        <div class="row">
            @if (loadingQuestions.Equals(true) || loadingDeleteTopic.Equals(true))
            {
                <LoadingComponent/>
            }
            else
            {
                if (!TopicsList.Any())
                {
                    <div class="text-center">
                        <p class="mt-5">You have no topics downloaded.😟 <a href="/courses">Click here </a> to download.</p>
                        <img src="img/undraw_empty.svg" style="max-width:300px"/>
                    </div>
                }
                else
                {
                    @foreach (Topic item in TopicsList)
                    {
                        <div class="card h-100 shadow border-0 mb-3">
                            <div class="card-body p-4">
                                <h5 class="card-title mb-3">
                                    @item.Name
                                </h5>
                                <div class="row">
                                    <div class="col-4">
                                        <button class="btn btn-danger" @onclick="() => DeleteTopic(item.TopicRef)">
                                            Delete
                                        </button>
                                    </div>
                                    <div class="col-4">
                                        <a class="btn btn-primary" href="@($"questions/{item.TopicRef}/offline")">View</a>
                                    </div>
                                    <div class="col-4">
                                        <button class="btn btn-primary" @onclick="() => CustomiseQuiz(item.TopicRef)">
                                            Quiz
                                        </button>
                                    </div>
                                </div>
                                <div class="container-fluid text-center border-0 shadow card-footer mt-2" style="display:@(showCustomisation.Equals(true) && topicToCustomise == item.TopicRef ? "block" : "none")">
                                    <h6 class="fw-bold">Customise Quiz🛠️</h6>
                                    <div class="container text-center m-1">

                                        <button class="btn @(negativeMarking.Equals(true) ? "btn-primary" : "btn-outline-primary")" @onclick="ToggleNegativeMarking">
                                            @(negativeMarking.Equals(true) ? "Negative Marking On" : "Negative Marking Off")
                                        </button>
                                    </div>
                                    <div class="container text-center">
                                        <div class="row">
                                            <div class="col">
                                                <p class="col-auto">Number Of Questions🔢</p>
                                            </div>
                                            <div class="col">
                                                <input class="col-auto" type="number" max="10" min="1" @bind="numberOfQuestions" />
                                            </div>
                                        </div>
                                    </div>
                                    <a class="btn btn-primary" href="@($"/quiz/{item.TopicRef}/{numberOfQuestions}/{negativeMarking}/offline")">
                                        Start🥸!
                                    </a>
                                </div>
                            </div>
                        </div>
                    }
                }
            }
        </div>
    </div>
</div>

@code {
    private IEnumerable<Topic> TopicsList { get; set; } = Enumerable.Empty<Topic>();
    private bool loadingQuestions;
    private bool loadingDeleteTopic;

    [Inject]
    NavigationManager navigationManager { get; set; }

    bool showCustomisation = false;
    int topicToCustomise;
    private bool negativeMarking = true;
    private int numberOfQuestions = 2;
    protected override void OnInitialized()
    {
        loadingQuestions = true;
        GetQuestionsFromDb();
        loadingQuestions = false;
        StateHasChanged();
    }

    private void ToggleNegativeMarking()
    {
        negativeMarking = !negativeMarking;   
    }
    private void GetQuestionsFromDb()
    {
        TopicsList = database.GetTopicsAsync().ToList();
    }

    private void CustomiseQuiz(int reference)
    {
        topicToCustomise = reference;

        if (showCustomisation.Equals(false))
            showCustomisation = true;
        else if (showCustomisation.Equals(true))
            showCustomisation = false;
    }

    private void DeleteTopic(int topic)
    {
        loadingDeleteTopic = true;
        database.DeleteTopicAsync(topic);
        GetQuestionsFromDb();
        loadingDeleteTopic = false;
        StateHasChanged();
    }
}
